{"version":3,"sources":["views/charts/ChartLineSimple.js","views/widgets/AllWidgets.js"],"names":["ChartLineSimple","props","borderColor","backgroundColor","pointHoverBackgroundColor","dataPoints","label","pointed","attributes","pointHoverColor","defaultDatasets","data","getColor","pointBackgroundColor","pointedOptions","scales","xAxes","offset","gridLines","color","zeroLineColor","ticks","fontSize","fontColor","yAxes","display","min","Math","apply","max","elements","line","borderWidth","point","radius","hitRadius","hoverRadius","straightOptions","defaultOptions","options","Object","assign","maintainAspectRatio","legend","computedDatasets","deepObjectsMerge","datasets","computedOptions","labels","defaultProps","AllWidgets","useState","widgets","setWidgets","generate","symbol","up","down","i","push","parseFloat","random","Widget","price","gColor","sm","lg","header","text","footerSlot","className","style","height","name","placement","onClick","func","disabled","useEffect","colors","tmp","all","length","floor","quote","CAD","toFixed"],"mappings":"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","file":"static/js/6.2f21863d.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { getColor, deepObjectsMerge } from '@coreui/utils'\r\nimport { CChartLine } from '@coreui/react-chartjs'\r\n\r\nconst ChartLineSimple = props => {\r\n\r\n  const {\r\n    borderColor,\r\n    backgroundColor,\r\n    pointHoverBackgroundColor,\r\n    dataPoints,\r\n    label,\r\n    pointed,\r\n    ...attributes\r\n  } = props\r\n\r\n  const pointHoverColor = (()=>{\r\n    if (pointHoverBackgroundColor) {\r\n      return pointHoverBackgroundColor\r\n    } else if (backgroundColor !== 'transparent') {\r\n      return backgroundColor\r\n    }\r\n    return borderColor\r\n  })()\r\n\r\n  const defaultDatasets = (()=>{\r\n    return [\r\n      {\r\n        data: dataPoints,\r\n        borderColor: getColor(borderColor),\r\n        backgroundColor: getColor(backgroundColor),\r\n        pointBackgroundColor: getColor(pointHoverColor),\r\n        pointHoverBackgroundColor: getColor(pointHoverColor),\r\n        label\r\n      }\r\n    ]\r\n  })()\r\n\r\n  const pointedOptions = (()=>{\r\n    return {\r\n      scales: {\r\n        xAxes: [\r\n          {\r\n            offset: true,\r\n            gridLines: {\r\n              color: 'transparent',\r\n              zeroLineColor: 'transparent'\r\n            },\r\n            ticks: {\r\n              fontSize: 2,\r\n              fontColor: 'transparent'\r\n            }\r\n          }\r\n        ],\r\n        yAxes: [\r\n          {\r\n            display: false,\r\n            ticks: {\r\n              display: false,\r\n              min: Math.min.apply(Math, dataPoints) - 5,\r\n              max: Math.max.apply(Math, dataPoints) + 5\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      elements: {\r\n        line: {\r\n          borderWidth: 1\r\n        },\r\n        point: {\r\n          radius: 4,\r\n          hitRadius: 10,\r\n          hoverRadius: 4\r\n        }\r\n      }\r\n    }\r\n  })()\r\n\r\n  const straightOptions = (()=>{\r\n    return {\r\n      scales: {\r\n        xAxes: [{\r\n          display: false\r\n        }],\r\n        yAxes: [{\r\n          display: false\r\n        }]\r\n      },\r\n      elements: {\r\n        line: {\r\n          borderWidth: 2\r\n        },\r\n        point: {\r\n          radius: 0,\r\n          hitRadius: 10,\r\n          hoverRadius: 4\r\n        }\r\n      }\r\n    }\r\n  })()\r\n\r\n  const defaultOptions = (()=>{\r\n    const options = pointed ? pointedOptions : straightOptions\r\n      return Object.assign({}, options, {\r\n        maintainAspectRatio: false,\r\n        legend: {\r\n          display: false\r\n        }\r\n      })\r\n  })()\r\n\r\n  const computedDatasets = (() => {\r\n    return deepObjectsMerge(defaultDatasets, attributes.datasets || {})\r\n  })()\r\n\r\n  const computedOptions = (() => {\r\n    return deepObjectsMerge(defaultOptions, attributes.options || {})\r\n  })()\r\n\r\n  // render\r\n\r\n  return (\r\n    <CChartLine\r\n      {...attributes}\r\n      datasets={computedDatasets}\r\n      options={computedOptions}\r\n      labels={label}\r\n    />\r\n  )\r\n}\r\n\r\nChartLineSimple.propTypes = {\r\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n  className: PropTypes.string,\r\n  //\r\n  borderColor: PropTypes.string,\r\n  backgroundColor: PropTypes.string,\r\n  pointHoverBackgroundColor: PropTypes.string,\r\n  dataPoints: PropTypes.array,\r\n  label: PropTypes.string,\r\n  pointed: PropTypes.bool\r\n};\r\n\r\nChartLineSimple.defaultProps = {\r\n  borderColor: 'rgba(255,255,255,.55)',\r\n  backgroundColor: 'transparent',\r\n  dataPoints: [10, 22, 34, 46, 58, 70, 46, 23, 45, 78, 34, 12],\r\n  label: 'Sales'\r\n};\r\n\r\nexport default ChartLineSimple\r\n","import React,{useEffect,useState} from 'react'\r\nimport {\r\n  CWidgetDropdown,\r\n  CRow,\r\n  CCol,\r\n  CDropdown,\r\n  CDropdownMenu,\r\n  CDropdownItem,\r\n  CDropdownToggle,\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\nimport ChartLineSimple from '../charts/ChartLineSimple'\r\n\r\nconst AllWidgets = (props) => {\r\n  var [widgets,setWidgets]=useState([])\r\n\r\n  const generate = (symbol,up,down)=>{\r\n  const random=(min, max)=>{\r\n    return ~~(Math.random() * (max - min) + min);\r\n  }\r\n  var data = []\r\n  for(var i=0;i<5;i++){\r\n    data.push(parseFloat(symbol)+random(up,down))\r\n  }\r\n  data.push(parseFloat(symbol))\r\n  return(data)\r\n}\r\n\r\n  const Widget=(color,price,symbol,data)=>{\r\n    var gColor = `gradient-${color}`\r\n    return(\r\n      <CCol sm=\"6\" lg=\"3\">\r\n      <CWidgetDropdown\r\n        color={gColor}\r\n        header={\"$\"+price}\r\n        text={symbol}\r\n        footerSlot={\r\n          <ChartLineSimple\r\n            pointed\r\n            className=\"c-chart-wrapper mt-3 mx-3\"\r\n            style={{height: '70px'}}\r\n            dataPoints={generate(price,0,50.5)}\r\n            pointHoverBackgroundColor={color}\r\n            label=\"$CAD\"\r\n            labels=\"months\"\r\n          />\r\n        }\r\n      >\r\n        <CDropdown>\r\n          <CDropdownToggle color=\"transparent\">\r\n            <CIcon name=\"cil-settings\"/>\r\n          </CDropdownToggle>\r\n          <CDropdownMenu className=\"pt-0\" placement=\"bottom-end\">\r\n            <CDropdownItem onClick={()=>{props.func(data)}}>Show</CDropdownItem>\r\n            <CDropdownItem disabled>Remove</CDropdownItem>\r\n          </CDropdownMenu>\r\n        </CDropdown>\r\n      </CWidgetDropdown>\r\n    </CCol>\r\n    )\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    const colors=['primary','success','info','warning','danger','dark']\r\n    var tmp=[]\r\n    for(var i=0;i<props.price.all.length;i++){\r\n      tmp.push(Widget(colors[Math.floor(Math.random() * colors.length)],parseFloat(props.price.all[i].quote.CAD.price).toFixed(2),props.price.all[i].symbol,props.price.all[i]))\r\n    }\r\n    setWidgets(tmp)\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n  return (\r\n    <CRow>\r\n      {widgets}\r\n    </CRow>\r\n  )\r\n}\r\n\r\nexport default AllWidgets\r\n"],"sourceRoot":""}